;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3.5.2016
;Author  : PerTic@n
;Company : If You Like This Software,Buy It
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 20,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 004D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004E char status,data;
; 0000 004F status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0050 data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0051 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0052    {
; 0000 0053    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0054 #if RX_BUFFER_SIZE0 == 256
; 0000 0055    // special case for receiver buffer size=256
; 0000 0056    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0057 #else
; 0000 0058    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0059    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 005A       {
; 0000 005B       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 005C       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 005D       }
; 0000 005E #endif
; 0000 005F    }
;PCODE: $00000029 VOL: 0
; 0000 0060 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0067 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0068 char data;
; 0000 0069 while (rx_counter0==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 006A data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 006B #if RX_BUFFER_SIZE0 != 256
; 0000 006C if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 006D #endif
; 0000 006E #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 006F --rx_counter0;
;PCODE: $00000043 VOL: 0
; 0000 0070 #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 0071 return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0072 }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0082 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0083 if (tx_counter0)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0084    {
; 0000 0085    --tx_counter0;
;PCODE: $0000004E VOL: 0
; 0000 0086    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0087 #if TX_BUFFER_SIZE0 != 256
; 0000 0088    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0089 #endif
; 0000 008A    }
;PCODE: $00000059 VOL: 0
; 0000 008B }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0092 {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0093 while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000060 VOL: 0
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0094 #asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
; 0000 0095 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0096    {
; 0000 0097    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0098 #if TX_BUFFER_SIZE0 != 256
; 0000 0099    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 009A #endif
; 0000 009B    ++tx_counter0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009C    }
; 0000 009D else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 009E    UDR0=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 009F #asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 00A0 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Analog Comparator interrupt service routine
;interrupt [ANA_COMP] void ana_comp_isr(void)
; 0000 00A9 {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00AA // Place your code here
; 0000 00AB 
; 0000 00AC }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;#define FIRST_ADC_INPUT 0
;#define LAST_ADC_INPUT 0
;unsigned char adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;#define ADC_VREF_TYPE 0x20
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 00B6 {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00B7 static unsigned char input_index=0;
; 0000 00B8 // Read the 8 most significant bits
; 0000 00B9 // of the AD conversion result
; 0000 00BA adc_data[input_index]=ADCH;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00BB // Select next ADC input
; 0000 00BC if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00BD    input_index=0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00BE ADMUX=(FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff))+input_index;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00BF // Delay needed for the stabilization of the ADC input voltage
; 0000 00C0 delay_us(10);
;PCODE: $0000009D VOL: 0
; 0000 00C1 // Start the AD conversion
; 0000 00C2 ADCSRA|=0x40;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C3 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 00C8 {
;PCODE: $000000A4 VOL: 0
; 0000 00C9 // Declare your local variables here
; 0000 00CA 
; 0000 00CB // Crystal Oscillator division factor: 1
; 0000 00CC #pragma optsize-
; 0000 00CD CLKPR=0x80;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00CE CLKPR=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00CF #ifdef _OPTIMIZE_SIZE_
; 0000 00D0 #pragma optsize+
; 0000 00D1 #endif
; 0000 00D2 
; 0000 00D3 // Input/Output Ports initialization
; 0000 00D4 // Port B initialization
; 0000 00D5 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00D6 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00D7 PORTB=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00D8 DDRB=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00D9 
; 0000 00DA // Port C initialization
; 0000 00DB // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00DC // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00DD PORTC=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00DE DDRC=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00DF 
; 0000 00E0 // Port D initialization
; 0000 00E1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00E2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00E3 PORTD=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00E4 DDRD=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00E5 
; 0000 00E6 // Timer/Counter 0 initialization
; 0000 00E7 // Clock source: System Clock
; 0000 00E8 // Clock value: Timer 0 Stopped
; 0000 00E9 // Mode: Normal top=0xFF
; 0000 00EA // OC0A output: Disconnected
; 0000 00EB // OC0B output: Disconnected
; 0000 00EC TCCR0A=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00ED TCCR0B=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00EE TCNT0=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00EF OCR0A=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00F0 OCR0B=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00F1 
; 0000 00F2 // Timer/Counter 1 initialization
; 0000 00F3 // Clock source: System Clock
; 0000 00F4 // Clock value: Timer1 Stopped
; 0000 00F5 // Mode: Normal top=0xFFFF
; 0000 00F6 // OC1A output: Discon.
; 0000 00F7 // OC1B output: Discon.
; 0000 00F8 // Noise Canceler: Off
; 0000 00F9 // Input Capture on Falling Edge
; 0000 00FA // Timer1 Overflow Interrupt: Off
; 0000 00FB // Input Capture Interrupt: Off
; 0000 00FC // Compare A Match Interrupt: Off
; 0000 00FD // Compare B Match Interrupt: Off
; 0000 00FE TCCR1A=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00FF TCCR1B=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0100 TCNT1H=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0101 TCNT1L=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0102 ICR1H=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0103 ICR1L=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0104 OCR1AH=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0105 OCR1AL=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0106 OCR1BH=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0107 OCR1BL=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0108 
; 0000 0109 // Timer/Counter 2 initialization
; 0000 010A // Clock source: System Clock
; 0000 010B // Clock value: Timer2 Stopped
; 0000 010C // Mode: Normal top=0xFF
; 0000 010D // OC2A output: Disconnected
; 0000 010E // OC2B output: Disconnected
; 0000 010F ASSR=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0110 TCCR2A=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0111 TCCR2B=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0112 TCNT2=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0113 OCR2A=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0114 OCR2B=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0115 
; 0000 0116 // External Interrupt(s) initialization
; 0000 0117 // INT0: Off
; 0000 0118 // INT1: Off
; 0000 0119 // Interrupt on any change on pins PCINT0-7: Off
; 0000 011A // Interrupt on any change on pins PCINT8-14: Off
; 0000 011B // Interrupt on any change on pins PCINT16-23: Off
; 0000 011C EICRA=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 011D EIMSK=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 011E PCICR=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 011F 
; 0000 0120 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0121 TIMSK0=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0122 
; 0000 0123 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0124 TIMSK1=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0125 
; 0000 0126 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0127 TIMSK2=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0128 
; 0000 0129 // USART initialization
; 0000 012A // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 012B // USART Receiver: On
; 0000 012C // USART Transmitter: On
; 0000 012D // USART0 Mode: Asynchronous
; 0000 012E // USART Baud Rate: 9600
; 0000 012F UCSR0A=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0130 UCSR0B=0xD8;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0131 UCSR0C=0x06;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0132 UBRR0H=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0133 UBRR0L=0x81;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0134 
; 0000 0135 // Analog Comparator initialization
; 0000 0136 // Analog Comparator: On
; 0000 0137 // The Analog Comparator's positive input is
; 0000 0138 // connected to the Bandgap Voltage Reference
; 0000 0139 // Interrupt on Output Toggle
; 0000 013A // Analog Comparator Input Capture by Timer/Counter 1: On
; 0000 013B ACSR=0x4C;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 013C ADCSRB=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 013D // Digital input buffer on AIN0: Off
; 0000 013E // Digital input buffer on AIN1: Off
; 0000 013F DIDR1=0x03;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0140 
; 0000 0141 // ADC initialization
; 0000 0142 // ADC Clock frequency: 625,000 kHz
; 0000 0143 // ADC Voltage Reference: AREF pin
; 0000 0144 // ADC Auto Trigger Source: ADC Stopped
; 0000 0145 // Only the 8 most significant bits of
; 0000 0146 // the AD conversion result are used
; 0000 0147 // Digital input buffers on ADC0: Off, ADC1: Off, ADC2: Off, ADC3: Off
; 0000 0148 // ADC4: Off, ADC5: Off
; 0000 0149 DIDR0=0x3F;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 014A ADMUX=FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 014B ADCSRA=0xCD;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 014C 
; 0000 014D // SPI initialization
; 0000 014E // SPI disabled
; 0000 014F SPCR=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0150 
; 0000 0151 // TWI initialization
; 0000 0152 // TWI disabled
; 0000 0153 TWCR=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0154 
; 0000 0155 // Global enable interrupts
; 0000 0156 #asm("sei")
;PCODE: $00000105 VOL: 0
	sei
;PCODE: $00000106 VOL: 0
; 0000 0157 
; 0000 0158 while (1)
;PCODE: $00000107 VOL: 0
; 0000 0159       {
; 0000 015A       // Place your code here
; 0000 015B 
; 0000 015C       }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 015D }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
